generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  ADMIN
  OWNER
  SPECIALIST
}

enum Gender {
  MALE
  FEMALE
}

enum Status {
  OPEN
  RESOLVED
  INPROGRESS
  URGENT
  LOW
  HIGH
  MEDIUM

}

enum Type {
  URGENT_CARE
  REPOTTING_ADVISE
  TROUBLESHOOTING
  CARE_SCHEDULE
  DISEASE_IDENTIFICATION
}
model User {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  password       String
  username       String    @unique
  firstName  String
  lastName String
  role           UserRole
  archived  Boolean  @default(false)

  profile String?

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  supportRequests Support[] 
  notifications  notif[]  @relation("UserNotifications")
  histories history[]
  plantAdvisories PlantAdvisory []
  feedBack Feedback []
  activityLogs   ActivityLog[]
}

model OTP {
  email     String @id
  otp       String
  expiresAt DateTime
}

model Support {
  id          Int      @id @default(autoincrement())
  concern_msg String
  image       String
  response    String?
  customer_id Int
  customer    User     @relation(fields: [customer_id], references: [id])

  createdAt   DateTime @default(now())
}

model notif {
  id          Int @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime @default(now())

  user        User     @relation("UserNotifications", fields: [userId], references: [id])
  userId      Int     

}

model history {
  id         Int @id @default(autoincrement())
  plant_id   String
  plant_name String
  img_url String?
  userId     Int
  user       User     @relation(fields: [userId], references: [id])

  createdAt   DateTime @default(now())
}

model PlantAdvisory {
  id          Int      @id @default(autoincrement())
  plant_name  String
  createdAt   DateTime @default(now())
  request_type String
  status      String
  priority    String
  response    String?
  userId      Int
 
  user        User     @relation(fields: [userId], references: [id])
}

model Feedback{
  id          Int      @id @default(autoincrement())
  rating      Int
  description String?
  createdAt   DateTime @default(now())
  status      String
  response    String?
  userId      Int
 
  user        User     @relation(fields: [userId], references: [id])
}

model ActivityLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  username  String
  activity  String
  timestamp DateTime @default(now())
}



